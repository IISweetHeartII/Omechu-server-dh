# .github/workflows/deploy.yml
name: Deploy FoodApp to EC2

on:
  push:
    branches: [ main, develop ]  # develop Î∏åÎûúÏπòÎèÑ Ìè¨Ìï®
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - 'PULL_REQUEST_TEMPLATE.md'
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # ÏàòÎèô Ïã§Ìñâ ÌóàÏö©

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Run backend tests
      working-directory: ./backend
      run: npm test || echo "No tests defined yet"
    
    - name: Run linter
      working-directory: ./backend
      run: npm run lint || echo "No linter configured yet"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy to EC2
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 300s
        script: |
          # Î≥ÄÏàò ÏÑ§Ï†ï
          PROJECT_DIR="/home/ubuntu/foodapp"
          LOG_FILE="/home/ubuntu/deploy.log"
          
          # Î°úÍ∑∏ Ìï®Ïàò
          log() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a $LOG_FILE
          }
          
          log "üöÄ Starting deployment process..."
          
          # ÌîÑÎ°úÏ†ùÌä∏ ÎîîÎ†âÌÜ†Î¶¨Î°ú Ïù¥Îèô
          cd $PROJECT_DIR || {
              log "‚ùå Failed to change directory to $PROJECT_DIR"
              exit 1
          }
          
          # ÌòÑÏû¨ Ïª§Î∞ã Ï†ïÎ≥¥ Ï†ÄÏû•
          CURRENT_COMMIT=$(git rev-parse --short HEAD)
          log "üìç Current commit: $CURRENT_COMMIT"
          
          # Git ÏóÖÎç∞Ïù¥Ìä∏
          log "üì• Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main
          
          NEW_COMMIT=$(git rev-parse --short HEAD)
          log "üìç New commit: $NEW_COMMIT"
          
          # Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå Ïû¨Î∞∞Ìè¨
          if [ "$CURRENT_COMMIT" != "$NEW_COMMIT" ]; then
              log "üîÑ Changes detected, proceeding with deployment..."
              
              # Backend ÏùòÏ°¥ÏÑ± ÏóÖÎç∞Ïù¥Ìä∏
              log "üì¶ Installing backend dependencies..."
              cd backend
              npm ci --production
              cd ..
              
              # ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï
              log "üåç Setting up environment variables..."
              if [ -f .env.production ]; then
                  cp .env.production .env
              fi
              
              # Docker Ïª®ÌÖåÏù¥ÎÑà Ïû¨ÏãúÏûë
              log "üê≥ Restarting Docker containers..."
              docker-compose down
              docker-compose up -d --build
              
              # ÏÑúÎπÑÏä§ ÏãúÏûë ÎåÄÍ∏∞
              log "‚è≥ Waiting for services to start..."
              sleep 30
              
              # Ìó¨Ïä§ Ï≤¥ÌÅ¨
              log "üè• Performing health check..."
              HEALTH_CHECK_PASSED=false
              
              for i in {1..10}; do
                  if curl -f http://localhost:3000/health > /dev/null 2>&1; then
                      log "‚úÖ Backend health check passed"
                      HEALTH_CHECK_PASSED=true
                      break
                  elif curl -f http://localhost:3000/ > /dev/null 2>&1; then
                      log "‚úÖ Backend is responding"
                      HEALTH_CHECK_PASSED=true
                      break
                  fi
                  log "‚è≥ Health check attempt $i/10 failed, retrying..."
                  sleep 10
              done
              
              # Nginx Ï≤¥ÌÅ¨
              if curl -f http://localhost/ > /dev/null 2>&1; then
                  log "‚úÖ Nginx is responding"
              else
                  log "‚ö†Ô∏è  Nginx health check failed"
              fi
              
              if [ "$HEALTH_CHECK_PASSED" = true ]; then
                  log "üéâ Deployment completed successfully!"
                  log "üìä Container status:"
                  docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
                  
                  # Ïù¥Ï†Ñ Ïù¥ÎØ∏ÏßÄ Ï†ïÎ¶¨
                  log "üßπ Cleaning up old Docker images..."
                  docker image prune -f
                  
              else
                  log "‚ùå Deployment failed - health check did not pass"
                  log "üìã Container logs:"
                  docker-compose logs --tail=50
                  exit 1
              fi
              
          else
              log "‚ÑπÔ∏è  No changes detected, skipping deployment"
          fi
          
          log "‚ú® Deployment process completed"

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    name: Send Notification
    if: always()
    
    steps:
    - name: Send Slack notification
      if: env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ needs.deploy.result }}
        channel: '#deployments'
        username: 'GitHub Actions'
        icon_emoji: ':rocket:'
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          FoodApp Î∞∞Ìè¨ ${{ needs.deploy.result == 'success' && 'ÏÑ±Í≥µ' || 'Ïã§Ìå®' }}
          Ïª§Î∞ã: ${{ github.event.head_commit.message }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Log deployment result
      run: |
        echo "Deployment Status: ${{ needs.deploy.result }}"
        echo "Test Status: ${{ needs.test.result }}"
